section.center
  h2 👋

section.center
  img.inline src=image_path("me.png")
  h2 Genadi Samokovarov

section.center
  a(href="https://twitter.com/gsamokovarov") twitter.com/gsamokovarov

section.center
  a(href="https://github.com/gsamokovarov") github.com/gsamokovarov

section.center
  a href="https://receipt-bank.com"
    img.inline src="https://www.receipt-bank.com/us/wp-content/themes/receipt-bank/dist/images/rb-logo.svg"

section.center data-background-iframe="https://www.receipt-bank.com/us/"
  a(href="#" class="navigate-next") &gt;

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/2000px-Flag_of_Bulgaria.svg.png"
  h2.white.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background="https://www.mapsland.com/maps/europe/bulgaria/large-location-map-of-bulgaria.jpg"
  h2.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background="http://www.norblomplumbing.com/img/Minneapolis.jpg"
  h2.white.shadow Minneapolis
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Minneapolis"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/9/99/Asen_Jordanov.png"
  h2.white.shadow Assen Jordanoff
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Assen_Jordanoff"

section.center data-background="http://pantonov.com/thoughts/assen_jordanoff.img/Inv_38.jpg"
  h2.white.shadow Jordaphone
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Assen_Jordanoff"

section.center
  img.inline src=image_path("made_in_bulgaria.png")

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/9/90/Atanasoff-Berry_Computer.jpg"
  h2.white.shadow John Atanasoff
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/John_Vincent_Atanasoff#/media/File:Atanasoff-Berry_Computer.jpg"

section.center
  img.inline src=image_path("made_in_bulgaria.png")

section.center data-background=image_path("photo-pravetz-82-1.jpg")
  h2.white.shadow Правец 82
  = copyright "Pravets", "https://en.wikipedia.org/wiki/Pravetz_computers"

section.center
  img.inline src=image_path("made_in_usa.png")

section data-background="https://cdn2.wanderlust.co.uk/media/2637/articles-public-mineral-baths-sofia-bulgaria-dreamstime.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section data-background="https://cdn2.wanderlust.co.uk/media/2632/magazine-1335.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section data-background="https://cdn2.wanderlust.co.uk/media/2633/magazine-2328.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section data-background="https://upload.wikimedia.org/wikipedia/commons/a/ad/AlexanderNevskyCathedral-Sofia-6.jpg"
  h2.white.shadow Sofia
  = copyright "Alexander Nevsky Cathedral", "https://en.wikipedia.org/wiki/Alexander_Nevsky_Cathedral%2C_Sofia"

section data-background="https://processflows.co.uk/wp-content/blogs.dir/1/files/2015/01/bpoFotolia_29276575_M-1.jpg"
  h2.white.shadow Sofia
  = copyright "ProcessFlows", "https://processflows.co.uk"

section.center data-background="#FCD846"
  a href="https://balkanruby.com"
    img.inline src=image_path("balkan.svg")
  p 17–18 May in Sofia, Bulgaria

section.center data-background="#000"
  h1.white.fragment Resolve Errors Straight from the Error Pages!

section.center
  h2 Rails 5.2

section data-background-iframe="https://weblog.rubyonrails.org/2017/11/27/Rails-5-2-Active-Storage-Redis-Cache-Store-HTTP2-Early-Hints-Credentials/"
  a(href="#" class="navigate-next") &gt;

section data-background-iframe="https://edgeguides.rubyonrails.org/active_storage_overview.html"
  a(href="#" class="navigate-next") &gt;

section.center
  h2 Rails 6.0

section data-background-iframe="https://weblog.rubyonrails.org/2019/1/18/Rails-6-0-Action-Mailbox-Action-Text-Multiple-DBs-Parallel-Testing/"
  a(href="#" class="navigate-next") &gt;

section data-background-iframe="https://edgeguides.rubyonrails.org/action_mailbox_basics.html"
  a(href="#" class="navigate-next") &gt;

section data-background-iframe="https://edgeguides.rubyonrails.org/action_text_overview.html"
  a(href="#" class="navigate-next") &gt;

section.center
  = copyright "Demo", "http://localhost:3000"

section.center data-background="http://i.imgur.com/FoSU23L.gif"
  = copyright "Demo", "http://localhost:3000"

section.center data-background="#F00"
  h2.white.fragment Actionable Errors

section.center
  p Actionable errors let's you dispatch actions from Rails' error pages.

section.center
  h3 History
  ul
    li <a href="https://github.com/vipulnsward">Vipul A M</a> in <a href="https://github.com/rails/rails/pull/26542">rails/rails#26542</a>
    li <a href="https://github.com/causztic">Yao Jie</a> in <a href="https://summerofcode.withgoogle.com/archive/2018/projects/6742288784949248/">GSoC 2018</a>
    li <a href="https://github.com/gsamokovarov">Genadi Samokovarov</a> in <a href="https://github.com/rails/rails/pull/34788">rails/rails#34788</a>

section.center
  pre(contenteditable=true): code.ruby
    '
      class PendingMigrationError < MigrationError
        include ActiveSupport::ActionableError

        action "Run pending migrations" do
          ActiveRecord::Tasks::DatabaseTasks.migrate
        end
      end

section.center data-background-iframe="/action"
  a(href="#" class="navigate-next") &gt;

section.center data-background="#000"
  p.white.fragment We're in the Unpacking Rails track 👈

section.center data-background="#000"
  p 📦

section.center data-background="https://thumbs.gfycat.com/SlowInfantileCusimanse-size_restricted.gif"

section.center data-background="https://thumbs.gfycat.com/SlowInfantileCusimanse-size_restricted.gif"
  h2.white.shadow Error Handling in Rails

section.center data-background="#000"
  h2.white Exceptions

section.center
  p Errors in Ruby are represented by exceptions.

section.center
  p They stop the current execution flow, unless they are handled.

section.center data-background="#000"
  pre.white(contenteditable=true)
    '
      Exception
        NoMemoryError
        ScriptError
          LoadError
          NotImplementedError
          SyntaxError
        SecurityError
        SignalException
          Interrupt
        StandardError -- default for rescue
        SystemExit
        SystemStackError
        fatal –- impossible to rescue

section.center data-background="#000"
  pre.white(contenteditable=true)
    '
      StandardError -- default for rescue
        ArgumentError
        EncodingError
        FiberError
        IOError
          EOFError
        IndexError
          KeyError
          StopIteration
        LocalJumpError
        NameError
          NoMethodError
        RangeError
          FloatDomainError
        RegexpError
        RuntimeError -- default for raise
        SystemCallError
          Errno::*
        ThreadError
        TypeError
        ZeroDivisionError

section.center data-background="#000"
  h2.white Kernel#raise

section.center
  pre(contenteditable=true): code.ruby
    '
      raise
      raise "Too lazy to define own error class..."
      raise Error.new("Oops")
      raise Error, "Oops", caller

section.center data-background="#000"
  h2.white Exception#backtrace

section.center
  pre(contenteditable=true): code.plain
    '
      Traceback (most recent call last):
        2: from /Users/genadi/.rbenv/versions/2.5.0/bin/irb:11:in `&lt;main&gt;&apos;
        1: from (irb):3
      RuntimeError (Access denied)

section.center data-background="#000"
  h2.white Kernel#caller

section.center
  pre(contenteditable=true): code.shell
    '
      &gt;&gt; puts caller
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `eval'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/context.rb:380:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:491:in `block (2 levels) in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:621:in `signal_status'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:488:in `block in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `loop'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:487:in `eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:428:in `block in run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:383:in `start'
      /Users/genadi/.rbenv/versions/2.5.0/bin/irb:11:in `&lt;main&gt;'
      =&gt; nil

section.center
  p Reflection of the current thread stack frames as readable text.

section.center
  p Represented as an Array of String objects.

section.center data-background="#000"
  h2.white Kernel#caller_locations

section.center data-background="#000"
  h2.white Exception#backtrace_locations

section.center
  p Represented as an Array of Thread::Backtrace::Location objects.

section.center
  pre(contenteditable=true): code.shell
    '
      &gt;&gt; caller_locations.first.path
      =&gt; &quot;/Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb&quot;
      &gt;&gt; caller_locations.first.label
      =&gt; &quot;eval&quot;
      &gt;&gt; caller_locations.first.lineno
      =&gt; 85

section.center data-background="#000"
  h2.white Rack

section.center
  p Rack is a protocol between Ruby web servers and frameworks.

section.center data-background="#000"
  h2.white Rack Application

section.center
  pre(contenteditable=true): code.ruby
    '
      require 'rack'

      app = proc do |env|
        ['200', {'Content-Type' => 'text/html'}, ['A barebones rack app.']]
      end

      Rack::Handler::WEBrick.run app

section.center
  p A Rack application is a Ruby object (not strictly a class) that responds to <span class="red">#call</span>.

section.center
  p It takes exactly one argument, the <span class="red">environment</span>.

section.center
  p Returns a triplet in the form of: [status, headers, body].

section.center
  p <a href="http://www.rubydoc.info/github/rack/rack/master/file/SPEC">RTFM</a>

section.center data-background="#000"
  p.white The foundation of HTTP middlewares in the Ruby 🌍

section.center data-background="#000"
  h2.white Rails Middleware

section.center
  pre: code.ruby contenteditable=true
    '
      class Middleware
        def initialize(app)
          @app = app
        end

        def call(env)
          # Pass control to the next request handler.
          @app.call(env)
        end
      end

section.center
  pre: code.ruby contenteditable=true
    '
      class Middleware
        def initialize(app)
          @app = app
        end

        def call(env)
          # Or stop the request here and return.
          ['200', {'Content-Type' => 'text/html'}, ['A barebones rack app.']]
        end
      end

section.center
  img.inline src=image_path("browser_to_rails.svg")

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      use ActionDispatch::HostAuthorization
      use Rack::Sendfile
      use ActionDispatch::Static
      use ActionDispatch::Executor
      use ActiveSupport::Cache::Strategy::LocalCache::Middleware
      use Rack::Runtime
      use Rack::MethodOverride
      use ActionDispatch::RequestId
      use ActionDispatch::RemoteIp
      use Sprockets::Rails::QuietAssets
      use Rails::Rack::Logger
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      use ActionDispatch::Reloader
      use ActionDispatch::Callbacks
      use ActiveRecord::Migration::CheckPending
      use ActionDispatch::Cookies
      use ActionDispatch::Session::CookieStore
      use ActionDispatch::Flash
      use ActionDispatch::ContentSecurityPolicy::Middleware
      use Rack::Head
      use Rack::ConditionalGet
      use Rack::ETag
      use Rack::TempfileReaper
      run Banitsa::Application.routes


section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions 👈
      use ActionDispatch::ActionableExceptions
      # ...

section.center data-background="#F00"
  h2.white ActionDispatch::DebugExceptions

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env) 👈

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  img.inline src=image_path("browser_to_rails.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception 👈
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  img.inline src=image_path("browser_to_rails.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception 👈
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception) 👈
        end
      end

section.center data-background-iframe="/error"
  a(href="#" class="navigate-next") &gt;

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions 👈
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center data-background="#F00"
  h2.white ActionDispatch::ShowExceptions

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" },
          ["500 Internal Server Error\n" ...]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception)
          else
            raise exception
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" },
          ["500 Internal Server Error\n"]]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception) 👈
          else
            raise exception
          end
        end
      end

section.center data-background-iframe="/500"
  a(href="#" class="navigate-next") &gt;

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" }, 👈
          ["500 Internal Server Error\n"]]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception)
          else
            raise exception
          end
        end
      end

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware 👈
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted? 👈

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request) 👈
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center data-background-iframe="/console"
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request) 👈
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end
  a(href="#" class="navigate-next") &gt;

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request) 👈
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env) 👈

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  img.inline src=image_path("browser_to_rails_with_web_console.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env) 👈

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers) 👈
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.permitted?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ] 👈
        end
      end

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware 👈
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware 👈 ⁉️
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  h2 Rails 5.2

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error)
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception
        alias_method :render_exception, :render_exception_with_web_console
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error)
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception 👈
        alias_method :render_exception, :render_exception_with_web_console
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception 👈

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error)
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception
        alias_method :render_exception, :render_exception_with_web_console
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error 👈

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error)
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception
        alias_method :render_exception, :render_exception_with_web_console
      end


section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error) 👈
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception
        alias_method :render_exception, :render_exception_with_web_console
      end

section.center data-background="#F00"
  h2.white 🙈 🙉 🙊

section.center data-background="#F00"
  h2.white Rails 6

section.center data-background="#F00"
  h2.white The Interceptor API

section.center data-background="#F00"
  h2.white 🙅‍♀️🐒 

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Railtie < ::Rails::Railtie
        initializer 'web_console.initialize' do
          ActionDispatch::DebugExceptions
            .register_interceptor(WebConsole::Interceptor)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      module WebConsole::Interceptor
        def self.call(request, exception)
          backtrace_cleaner = request.get_header('action_dispatch.backtrace_cleaner')
          error = ExceptionWrapper.new(backtrace_cleaner, exception).exception

          # Get the original exception if ExceptionWrapper decides to follow it.
          Thread.current[:__web_console_exception] = error

          # ActionView::Template::Error bypass ExceptionWrapper original
          # exception following. The backtrace in the view is generated from
          # reaching out to original_exception in the view.
          if error.is_a?(ActionView::Template::Error)
            Thread.current[:__web_console_exception] = error.cause
          end
        end
      end

section.center data-background="#000"
  h2.white Application vs Framework Traces

section.center data-background-iframe="/error"
  a(href="#" class="navigate-next") &gt;

section.center data-background="#F00"
  h2.white Actionable Errors

section.center
  pre(contenteditable=true): code.ruby
    '
      class PendingMigrationError < MigrationError
        include ActiveSupport::ActionableError

        action "Run pending migrations" do
          ActiveRecord::Tasks::DatabaseTasks.migrate
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class PendingMigrationError < MigrationError
        include ActiveSupport::ActionableError 👈

        action "Run pending migrations" do
          ActiveRecord::Tasks::DatabaseTasks.migrate
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class PendingMigrationError < MigrationError
        include ActiveSupport::ActionableError

        action "Run pending migrations" do 👈
          ActiveRecord::Tasks::DatabaseTasks.migrate
        end
      end

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions 👈
      use ActionDispatch::ActionableExceptions
      # ...

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception) 👈
        end
      end

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware                        👇
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::ActionableExceptions 👈
      # ...

section.center
  pre(contenteditable=true): code.html
    '
      # action_dispatch/middleware/templates/rescues/diagnostics.html.erb
      <%= render "rescues/actions", exception: @exception, request: @request %>

section.center
  pre(contenteditable=true): code.html
    '
      # action_dispatch/middleware/templates/rescues/_actions.html.erb
      <% actions = ActiveSupport::ActionableError.actions(exception) %>

      <% if actions.any? %>
        <div class="actions">
          <% actions.each do |action, _| %>
            <%= button_to action, ActionDispatch::ActionableExceptions.endpoint, params: {
              error: exception.class.name,
              action: action,
              location: request.path
            } %>
          <% end %>
        </div>
      <% end %>

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ActionableExceptions
        def call(env)
          request = ActionDispatch::Request.new(env)
          return @app.call(env) unless actionable_request?(request)

          ActiveSupport::ActionableError.dispatch \
            request.params[:error].to_s.safe_constantize,
            request.params[:action]

          redirect_to request.params[:location]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ActionableExceptions
        def call(env)
          request = ActionDispatch::Request.new(env)
          return @app.call(env) unless actionable_request?(request) 👈

          ActiveSupport::ActionableError.dispatch \
            request.params[:error].to_s.safe_constantize,
            request.params[:action]

          redirect_to request.params[:location]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ActionableExceptions
        def call(env)
          request = ActionDispatch::Request.new(env)
          return @app.call(env) unless actionable_request?(request)

          ActiveSupport::ActionableError.dispatch \ 👈
            request.params[:error].to_s.safe_constantize,
            request.params[:action]

          redirect_to request.params[:location]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ActionableExceptions
        def call(env)
          request = ActionDispatch::Request.new(env)
          return @app.call(env) unless actionable_request?(request)

          ActiveSupport::ActionableError.dispatch \
            request.params[:error].to_s.safe_constantize,
            request.params[:action]

          redirect_to request.params[:location] 👈
        end
      end

section.center data-background="#F00"
  h2.white Strategies

section.center data-background="#00F"
  h2.white Middleware Checker

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActiveRecord::Migration::CheckPending
        def initialize(app)
          @app = app
          @last_check = 0
        end

        def call(env)
          mtime = ActiveRecord::Base.connection.migration_context.last_migration.mtime.to_i
          if @last_check < mtime
            ActiveRecord::Migration.check_pending!(ActiveRecord::Base.connection)
            @last_check = mtime
          end
          @app.call(env)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActiveRecord::Migration::CheckPending
        def initialize(app)
          @app = app
          @last_check = 0
        end

        def call(env)
          mtime = ActiveRecord::Base.connection.migration_context.last_migration.mtime.to_i
          if @last_check < mtime
            ActiveRecord::Migration.check_pending!(ActiveRecord::Base.connection) 👈
            @last_check = mtime
          end
          @app.call(env)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActiveRecord::Railtie < Rails::Railtie
        initializer "active_record.migration_error" do
          if config.active_record.delete(:migration_error) == :page_load
            config.app_middleware.insert_after ::ActionDispatch::Callbacks,
              ActiveRecord::Migration::CheckPending
          end
        end
      end

section.center
  p.fragment Too much work 😕

section.center data-background="#00F"
  h2.white Act on Existing Error

section.center
  a href="https://github.com/rails/rails/pull/36071" rails/rails#36071

section.center
  p Work in Progress 🏗

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::SetupError < ActionMailbox::Error
        include ActiveSupport::ActionableError

        def initialize(message = nil)
          super(message || <<~MESSAGE)
            Action Mailbox does not appear to be installed. Do you want to
            install it now?
          MESSAGE
        end

        action "Install now" do
          Rails::Command.invoke "active_storage:install"
          Rails::Command.invoke "action_mailbox:install"
          Rails::Command.invoke "db:migrate"
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::SetupError < ActionMailbox::Error
        include ActiveSupport::ActionableError 👈

        def initialize(message = nil)
          super(message || <<~MESSAGE)
            Action Mailbox does not appear to be installed. Do you want to
            install it now?
          MESSAGE
        end

        action "Install now" do
          Rails::Command.invoke "active_storage:install"
          Rails::Command.invoke "action_mailbox:install"
          Rails::Command.invoke "db:migrate"
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::SetupError < ActionMailbox::Error
        include ActiveSupport::ActionableError

        def initialize(message = nil)
          super(message || <<~MESSAGE)
            Action Mailbox does not appear to be installed. Do you want to
            install it now?
          MESSAGE
        end

        action "Install now" do 👈
          Rails::Command.invoke "active_storage:install"
          Rails::Command.invoke "action_mailbox:install"
          Rails::Command.invoke "db:migrate"
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::Engine < Rails::Engine
        initializer "action_mailbox.setup" do
          ActionDispatch::ActionableExceptions.on(
            ActiveRecord::StatementInvalid
          ) do |err|
            if err.to_s.match?(InboundEmail.table_name)
              raise SetupError
            end
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::Engine < Rails::Engine
        initializer "action_mailbox.setup" do
          ActionDispatch::ActionableExceptions.on( 👈
            ActiveRecord::StatementInvalid
          ) do |err|
            if err.to_s.match?(ActionMailbox::InboundEmail.table_name)
              raise ActionMailbox::SetupError
            end
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::Engine < Rails::Engine
        initializer "action_mailbox.setup" do
          ActionDispatch::ActionableExceptions.on(
            ActiveRecord::StatementInvalid 👈
          ) do |err|
            if err.to_s.match?(ActionMailbox::InboundEmail.table_name)
              raise ActionMailbox::SetupError
            end
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionMailbox::Engine < Rails::Engine
        initializer "action_mailbox.setup" do
          ActionDispatch::ActionableExceptions.on(
            ActiveRecord::StatementInvalid
          ) do |err|
            if err.to_s.match?(ActionMailbox::InboundEmail.table_name)
              raise ActionMailbox::SetupError 👈
            end
          end
        end
      end

section.center data-background="#000"
  h2.white.fragment TL;DR

section.center data-background="#000" data-background-transition="none"
  p.white We can improve the development experience!

section.center data-background="#000" data-background-transition="none"
  p.white Actionable errors are one step.

section.center data-background="https://i.makeagif.com/media/9-17-2015/R3hDjT.gif" 
  p.white.shadow Nobody reads the docs!

section.center
  p gem install break

section.center data-background="#000"
  h1.white.fragment Thank you!
